# Generated by taking https://github.com/gothinkster/realworld/blob/master/api/swagger.json
# and feeding it into https://mermade.org.uk/openapi-converter

openapi: 3.0.0
info:
  description: {{cookiecutter.project_name}} API
  version: 1.0.0
  title: {{cookiecutter.project_name}} API
  contact:
    name: {{cookiecutter.project_name}}
    url: Project URL (Optional)
  license:
    name: License Name
    url: License URL (Optional)
paths:
  /users/login:
    post:
      summary: Existing user login
      description: Login for existing user
      tags:
        - User and Authentication
      operationId: Login
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginUserRequest"
        description: Credentials to use
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "401":
          description: Unauthorized
        "422":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorModel"
  /users:
    post:
      summary: Register a new user
      description: Register a new user
      tags:
        - User and Authentication
      operationId: CreateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewUserRequest"
        description: Details of the new user to register
        required: true
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "422":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorModel"
  # Had to add this endpoint so that the spec adheres the
  # Postman collection of test requests
  /user:
    get:
      summary: Get current user
      description: Gets the currently logged-in user
      tags:
        - User and Authentication
      security:
        - Token:
            []
      operationId: GetCurrentUser
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "401":
          description: Unauthorized
        "422":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorModel"
    put:
      summary: Update current user
      description: Updated user information for current user
      tags:
        - User and Authentication
      security:
        - Token:
            []
      operationId: UpdateCurrentUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserRequest"
        description: User details to update. At least **one** field is required.
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "401":
          description: Unauthorized
        "422":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorModel"
  "/profiles/{username}":
    get:
      summary: Get a profile
      description: Get a profile of a user of the system. Auth is optional
      tags:
        - Profile
      operationId: GetProfileByUsername
      parameters:
        - name: username
          in: path
          description: Username of the profile to get
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProfileResponse"
        "401":
          description: Unauthorized
        "422":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorModel"
servers:
  - url: /api
components:
  securitySchemes:
    Token:
      description: >+
        For accessing the protected API resources, you must have received a a
        valid JWT token after registering or logging in. This JWT token must
        then be used for all protected resources by passing it in via the
        'Authorization' header.


        A JWT token is generated by the API by either registering via /users or logging in via /users/login.


        The following format must be in the 'Authorization' header :

            Token: xxxxxx.yyyyyyy.zzzzzz

      type: apiKey
      name: Authorization
      in: header
  schemas:
    LoginUser:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
          # format: password  # TODO: uncomment when https://github.com/p1c2u/openapi-core/pull/132 is merged
      required:
        - email
        - password
    LoginUserRequest:
      type: object
      properties:
        user:
          $ref: "#/components/schemas/LoginUser"
      required:
        - user
    NewUser:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
          # format: password  # TODO: uncomment when https://github.com/p1c2u/openapi-core/pull/132 is merged
      required:
        - username
        - email
        - password
    NewUserRequest:
      type: object
      properties:
        user:
          $ref: "#/components/schemas/NewUser"
      required:
        - user
    User:
      type: object
      properties:
        email:
          type: string
        token:
          type: string
        username:
          type: string
        bio:
          type: string
          nullable: true
        image:
          type: string
          nullable: true
      required:
        - email
        - token
        - username
        - bio
        - image
    UserResponse:
      type: object
      properties:
        user:
          $ref: "#/components/schemas/User"
      required:
        - user
    UpdateUser:
      type: object
      properties:
        email:
          type: string
        token:
          type: string
        username:
          type: string
        bio:
          type: string
          nullable: true
        image:
          type: string
          nullable: true
    UpdateUserRequest:
      type: object
      properties:
        user:
          $ref: "#/components/schemas/UpdateUser"
      required:
        - user
    ProfileResponse:
      type: object
      properties:
        profile:
          $ref: "#/components/schemas/Profile"
      required:
        - profile
    Profile:
      type: object
      properties:
        username:
          type: string
        bio:
          type: string
          nullable: true
        image:
          type: string
          nullable: true
      required:
        - username
        - bio
        - image
    GenericErrorModel:
      type: object
      properties:
        errors:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
      required:
        - errors
